

Constant: O(1)

Logarithmic: O(log(n))

Liner: O(n)

Log-Liner O(nlog(n))

Quadratic: O(n^2)

Cubic: O(n^3)

Exponential: O(2^n)

Factorial: O(!n)

Note that big O notation is usually understood to describe the worst-case complexity of an algorithm, even though the worse-case complexity might differ from the average-case complexity.

For example, some sorting algorithms have different time complexities depending on the layout of elements in their input array.  In rare cases, their time complexity will be much worse than in more common cases.  Similarly, an algorithm that takes in a string and performs special operations on uppercase characters might have a different time complexity when run on an input string of only uppercase characters bs. on an input string with just a few uppercase characters.

Thus, when describing the time complexity of an algorithm, it can sometimes be helpful to specify whether the time complexity refers to the average case or to the worse case (e.g., "this algorithm runs in O(nlog(n)) time on average and in O(n^2) time in the worse-case").